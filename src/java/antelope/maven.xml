<project default="antelope:setup-webapp" xmlns:j="jelly:core" 
	xmlns:deploy="deploy" xmlns:ant="jelly:ant" xmlns:maven="jelly:maven">
	<goal name="antelope:setup-webapp" 
		description="Configure webapp for development">
		<ant:echo> 
############################################################ 
Use antelope:setup instead of this goal 
############################################################# 
		</ant:echo>
	</goal>
	<goal name="antelope:setup" 
		description="Sets up the application assuming db is already running" prereqs="antelope:getEclipsePlugin">
		<attainGoal name="antelope:hibernate"/>
		<attainGoal name="eclipse"/>
		<j:set var="maven.test.skip" value="true"/>
		<attainGoal name="war:inplace"/>
		<j:set var="maven.test.skip" value="false"/>
		<attainGoal name="antelope:generateStartupData"/>
		<ant:echo> 
###################################################################### 
Now refresh in eclipse If this failed due to not finding the 
database - have you started it? If you see errors about security 
being already granted is it because sometime HQSL ignores drops - 
the application will still work If not in another console run maven 
antelope:start-hsql 
###################################################################### 
			</ant:echo>
	</goal>
	<goal name="antelope:setup-database" 
		description="Configure database for development" 
		prereqs="java:compile, java:jar-resources">
		<attainGoal name="antelope:generateStartupData"/>
	</goal>
	<goal name="antelope:hibernate" 
		description="Generate the hbm.xml files using XDoclet" 
		prereqs="java:compile, java:jar-resources">
		<mkdir dir="${antelope.generated.dest}"/>
		<taskdef classpathref="maven.dependency.classpath" 
			classname="xdoclet.modules.hibernate.HibernateDocletTask" 
			name="hibernatedoclet"/>
		<hibernatedoclet destDir="${antelope.generated.dest}" force="true" 
			verbose="true">
			<hibernate version="2.0"/>
			<fileset dir="${maven.src.dir}/java" 
				includes="${antelope.hibernate.includes}" 
				excludes="${antelope.hibernate.excludes}" />
		</hibernatedoclet>
	</goal>
	<postGoal name="antelope:hibernate">
		<copy todir="${maven.build.dest}">
			<fileset dir="${antelope.generated.dest}">
				<include name="**/*.hbm.xml"/>
			</fileset>
		</copy>
	</postGoal>
	<goal name="antelope:generateStartupData" 
		description="Generate startup data" 
		prereqs="antelope:hibernate, hibernate:schema-export, test:compile">
		<echo message="${maven.hibernate.input.dir}"/>
		<taskdef name="junit" 
			classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask" 
			/>
		<path id="test">
			<pathelement 
				location="${pom.getPluginContext('maven-test-plugin').getVariable('maven.test.dest')}"/>
			<pathelement location="${maven.build.dest}"/>
			<path refid="maven.dependency.classpath"/>
		</path>
		<property name="test" refid="test"/>
		<junit fork="yes" dir="${basedir}" filtertrace="on" haltonfailure="on" 
			printsummary="on" showoutput="on">
			<classpath>
				<path refid="test"/>
			</classpath>
			<formatter type="plain" usefile="false"/>
			<formatter type="brief" usefile="false" />
			<test name="${antelope.startupdata.testcase}"/>
		</junit>
	</goal>
	<goal name="antelope:clean" 
		description="Cleans an inplace exploded WAR webapp" prereqs="war:init">
		<ant:delete dir="${maven.war.src}/WEB-INF/lib"/>
		<ant:delete dir="${maven.war.src}/WEB-INF/classes"/>
	</goal>
	<postGoal name="clean">
		<attainGoal name="antelope:clean"/>
	</postGoal>
	<goal name="antelope:start-hsql">
		<java classname="org.hsqldb.Server" fork="yes" dir=".">
			<classpath>
				<path refid="maven.dependency.classpath"/>
			</classpath>
			<arg value="-database"/>
			<arg value="antelope"/>
		</java>
	</goal>
	<goal name="antelope:getEclipsePlugin">
		<maven:get plugin="maven-eclipse-plugin" property="plugin" 
			var="eclipsePlugin" />
		<j:if test="${eclipsePlugin.currentVersion.compareTo('1.8') lt 0}">
			<ant:echo> 
###################################################################### 
Fetching Eclipse Plugin You may have to run your goal again 
###################################################################### 
				</ant:echo>
			<j:set var="groupId" value="maven"/>
			<j:set var="artifactId" value="maven-eclipse-plugin"/>
			<j:set var="version" value="1.8"/>
			<attainGoal name="plugin:download"/>
		</j:if>
	</goal>
	
	<goal name="antelope:upgradePlugins">
		<j:forEach var="dep" items="${pom.dependencies}">
				<j:if test="${dep.type =='plugin'}">
					<maven:get plugin="${dep.artifactId}" property="plugin" 
						var="plugin" />
					<j:if 
						test="${plugin.currentVersion.compareTo('${dep.version}') lt 0}">
						<ant:echo> 
###################################################################### 
Fetching ${dep.artifactId} Plugin You may have to run your goal again 
###################################################################### 
				</ant:echo>
						<j:set var="groupId" value="${dep.groupId}"/>
						<j:set var="artifactId" value="${dep.artifactId}"/>
						<j:set var="version" value="${dep.version}"/>
						<attainGoal name="plugin:download"/>
					</j:if>
				</j:if>
		</j:forEach>		
	</goal>
</project>